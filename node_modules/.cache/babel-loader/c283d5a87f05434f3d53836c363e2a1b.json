{"ast":null,"code":"var _jsxFileName = \"/Users/daviddempsey/Documents/School/SDHacks2019/EZStudy/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = ev => {\n      this.setState({\n        success: false,\n        url: \"\"\n      });\n    };\n\n    this.handleUpload = ev => {\n      let file = this.uploadInput.files[0]; // Split the filename to get the name and type\n\n      let fileParts = this.uploadInput.files[0].name.split(\".\");\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      axios.post(\"http://localhost:3001/sign_s3\", {\n        fileName: fileName,\n        fileType: fileType\n      }).then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Recieved a signed request \" + signedRequest); // Put the fileType in the headers for the upload\n\n        var options = {\n          headers: {\n            \"Content-Type\": fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        alert(JSON.stringify(error));\n      });\n    };\n\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n\n  render() {\n    const Success_message = () => React.createElement(\"div\", {\n      style: {\n        padding: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        color: \"green\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"SUCCESSFUL UPLOAD\"), React.createElement(\"a\", {\n      href: this.state.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Access the file here\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"UPLOAD A FILE\"), this.state.success ? React.createElement(Success_message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }) : null, React.createElement(\"input\", {\n      onChange: this.handleChange,\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      type: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"UPLOAD\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/daviddempsey/Documents/School/SDHacks2019/EZStudy/src/App.js"],"names":["React","Component","axios","App","constructor","props","handleChange","ev","setState","success","url","handleUpload","file","uploadInput","files","fileParts","name","split","fileName","fileType","console","log","post","then","response","returnData","data","signedRequest","options","headers","put","result","catch","error","alert","JSON","stringify","state","render","Success_message","padding","color","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n\n  handleChange = ev => {\n    this.setState({ success: false, url: \"\" });\n  };\n  // Perform the upload\n  handleUpload = ev => {\n    let file = this.uploadInput.files[0];\n    // Split the filename to get the name and type\n    let fileParts = this.uploadInput.files[0].name.split(\".\");\n    let fileName = fileParts[0];\n    let fileType = fileParts[1];\n    console.log(\"Preparing the upload\");\n    axios\n      .post(\"http://localhost:3001/sign_s3\", {\n        fileName: fileName,\n        fileType: fileType\n      })\n      .then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({ url: url });\n        console.log(\"Recieved a signed request \" + signedRequest);\n\n        // Put the fileType in the headers for the upload\n        var options = {\n          headers: {\n            \"Content-Type\": fileType\n          }\n        };\n        axios\n          .put(signedRequest, file, options)\n          .then(result => {\n            console.log(\"Response from s3\");\n            this.setState({ success: true });\n          })\n          .catch(error => {\n            alert(\"ERROR \" + JSON.stringify(error));\n          });\n      })\n      .catch(error => {\n        alert(JSON.stringify(error));\n      });\n  };\n\n  render() {\n    const Success_message = () => (\n      <div style={{ padding: 50 }}>\n        <h3 style={{ color: \"green\" }}>SUCCESSFUL UPLOAD</h3>\n        <a href={this.state.url}>Access the file here</a>\n        <br />\n      </div>\n    );\n    return (\n      <div className=\"App\">\n        <center>\n          <h1>UPLOAD A FILE</h1>\n          {this.state.success ? <Success_message /> : null}\n          <input\n            onChange={this.handleChange}\n            ref={ref => {\n              this.uploadInput = ref;\n            }}\n            type=\"file\"\n          />\n          <br />\n          <button className=\"button\" onClick={this.handleUpload}>\n            UPLOAD\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}